
vrs_cv4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001168  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080012a8  080012b0  000112b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080012a8  080012a8  000112a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080012ac  080012ac  000112ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000112b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  080012b0  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000001c  080012b0  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000112b0  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002ab3  00000000  00000000  000112d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000086d  00000000  00000000  00013d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000418  00000000  00000000  00014600  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b0  00000000  00000000  00014a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000156f  00000000  00000000  00014dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001275  00000000  00000000  00016337  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  000175ac  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000010b0  00000000  00000000  0001762c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000186dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000000 	.word	0x20000000
 800015c:	00000000 	.word	0x00000000
 8000160:	08001290 	.word	0x08001290

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000004 	.word	0x20000004
 800017c:	08001290 	.word	0x08001290

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f092 0f00 	teq	r2, #0
 800046a:	bf14      	ite	ne
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e720      	b.n	80002c4 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_ul2d>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	f04f 0500 	mov.w	r5, #0
 8000492:	e00a      	b.n	80004aa <__aeabi_l2d+0x16>

08000494 <__aeabi_l2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a2:	d502      	bpl.n	80004aa <__aeabi_l2d+0x16>
 80004a4:	4240      	negs	r0, r0
 80004a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b6:	f43f aedc 	beq.w	8000272 <__adddf3+0xe6>
 80004ba:	f04f 0203 	mov.w	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e2:	ea40 000e 	orr.w	r0, r0, lr
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	4414      	add	r4, r2
 80004ec:	e6c1      	b.n	8000272 <__adddf3+0xe6>
 80004ee:	bf00      	nop

080004f0 <__gedf2>:
 80004f0:	f04f 3cff 	mov.w	ip, #4294967295
 80004f4:	e006      	b.n	8000504 <__cmpdf2+0x4>
 80004f6:	bf00      	nop

080004f8 <__ledf2>:
 80004f8:	f04f 0c01 	mov.w	ip, #1
 80004fc:	e002      	b.n	8000504 <__cmpdf2+0x4>
 80004fe:	bf00      	nop

08000500 <__cmpdf2>:
 8000500:	f04f 0c01 	mov.w	ip, #1
 8000504:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000508:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800050c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000510:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000514:	bf18      	it	ne
 8000516:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800051a:	d01b      	beq.n	8000554 <__cmpdf2+0x54>
 800051c:	b001      	add	sp, #4
 800051e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000522:	bf0c      	ite	eq
 8000524:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000528:	ea91 0f03 	teqne	r1, r3
 800052c:	bf02      	ittt	eq
 800052e:	ea90 0f02 	teqeq	r0, r2
 8000532:	2000      	moveq	r0, #0
 8000534:	4770      	bxeq	lr
 8000536:	f110 0f00 	cmn.w	r0, #0
 800053a:	ea91 0f03 	teq	r1, r3
 800053e:	bf58      	it	pl
 8000540:	4299      	cmppl	r1, r3
 8000542:	bf08      	it	eq
 8000544:	4290      	cmpeq	r0, r2
 8000546:	bf2c      	ite	cs
 8000548:	17d8      	asrcs	r0, r3, #31
 800054a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800054e:	f040 0001 	orr.w	r0, r0, #1
 8000552:	4770      	bx	lr
 8000554:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000558:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800055c:	d102      	bne.n	8000564 <__cmpdf2+0x64>
 800055e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000562:	d107      	bne.n	8000574 <__cmpdf2+0x74>
 8000564:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d1d6      	bne.n	800051c <__cmpdf2+0x1c>
 800056e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000572:	d0d3      	beq.n	800051c <__cmpdf2+0x1c>
 8000574:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <__aeabi_cdrcmple>:
 800057c:	4684      	mov	ip, r0
 800057e:	4610      	mov	r0, r2
 8000580:	4662      	mov	r2, ip
 8000582:	468c      	mov	ip, r1
 8000584:	4619      	mov	r1, r3
 8000586:	4663      	mov	r3, ip
 8000588:	e000      	b.n	800058c <__aeabi_cdcmpeq>
 800058a:	bf00      	nop

0800058c <__aeabi_cdcmpeq>:
 800058c:	b501      	push	{r0, lr}
 800058e:	f7ff ffb7 	bl	8000500 <__cmpdf2>
 8000592:	2800      	cmp	r0, #0
 8000594:	bf48      	it	mi
 8000596:	f110 0f00 	cmnmi.w	r0, #0
 800059a:	bd01      	pop	{r0, pc}

0800059c <__aeabi_dcmpeq>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff fff4 	bl	800058c <__aeabi_cdcmpeq>
 80005a4:	bf0c      	ite	eq
 80005a6:	2001      	moveq	r0, #1
 80005a8:	2000      	movne	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmplt>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffea 	bl	800058c <__aeabi_cdcmpeq>
 80005b8:	bf34      	ite	cc
 80005ba:	2001      	movcc	r0, #1
 80005bc:	2000      	movcs	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmple>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffe0 	bl	800058c <__aeabi_cdcmpeq>
 80005cc:	bf94      	ite	ls
 80005ce:	2001      	movls	r0, #1
 80005d0:	2000      	movhi	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_dcmpge>:
 80005d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005dc:	f7ff ffce 	bl	800057c <__aeabi_cdrcmple>
 80005e0:	bf94      	ite	ls
 80005e2:	2001      	movls	r0, #1
 80005e4:	2000      	movhi	r0, #0
 80005e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ea:	bf00      	nop

080005ec <__aeabi_dcmpgt>:
 80005ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f0:	f7ff ffc4 	bl	800057c <__aeabi_cdrcmple>
 80005f4:	bf34      	ite	cc
 80005f6:	2001      	movcc	r0, #1
 80005f8:	2000      	movcs	r0, #0
 80005fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fe:	bf00      	nop

08000600 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains 
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)               
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	60fb      	str	r3, [r7, #12]
  /* Clear RES and SCAN bits */ 
  tmpreg1 &= CR1_CLEAR_MASK;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800061e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000622:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | ADC_InitStruct->ADC_Resolution);
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	791b      	ldrb	r3, [r3, #4]
 8000628:	021a      	lsls	r2, r3, #8
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4313      	orrs	r3, r2
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	4313      	orrs	r3, r2
 8000634:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	689b      	ldr	r3, [r3, #8]
 8000640:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000642:	68fa      	ldr	r2, [r7, #12]
 8000644:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <ADC_Init+0xa4>)
 8000646:	4013      	ands	r3, r2
 8000648:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	691a      	ldr	r2, [r3, #16]
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	68db      	ldr	r3, [r3, #12]
 8000652:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	689b      	ldr	r3, [r3, #8]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 8000658:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	795b      	ldrb	r3, [r3, #5]
 800065e:	005b      	lsls	r3, r3, #1
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 8000660:	4313      	orrs	r3, r2
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	4313      	orrs	r3, r2
 8000666:	60fb      	str	r3, [r7, #12]
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	68fa      	ldr	r2, [r7, #12]
 800066c:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f023 73f8 	bic.w	r3, r3, #32505856	; 0x1f00000
 800067a:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */ 
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	7d1b      	ldrb	r3, [r3, #20]
 8000680:	3b01      	subs	r3, #1
 8000682:	b2da      	uxtb	r2, r3
 8000684:	7afb      	ldrb	r3, [r7, #11]
 8000686:	4313      	orrs	r3, r2
 8000688:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 800068a:	7afb      	ldrb	r3, [r7, #11]
 800068c:	051b      	lsls	r3, r3, #20
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	4313      	orrs	r3, r2
 8000692:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	631a      	str	r2, [r3, #48]	; 0x30
}
 800069a:	bf00      	nop
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	c0fff7fd 	.word	0xc0fff7fd

080006a8 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)                            
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Resolution member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]

  /* Initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2200      	movs	r2, #0
 80006ba:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2200      	movs	r2, #0
 80006c0:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_CC2;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80006ce:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2201      	movs	r2, #1
 80006da:	751a      	strb	r2, [r3, #20]
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop

080006e8 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	460b      	mov	r3, r1
 80006f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d006      	beq.n	8000708 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	f043 0201 	orr.w	r2, r3, #1
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000706:	e005      	b.n	8000714 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	f023 0201 	bic.w	r2, r3, #1
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	609a      	str	r2, [r3, #8]
  }
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop

08000720 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_192Cycles: Sample time equal to 192 cycles	
  *     @arg ADC_SampleTime_384Cycles: Sample time equal to 384 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	4608      	mov	r0, r1
 800072a:	4611      	mov	r1, r2
 800072c:	461a      	mov	r2, r3
 800072e:	4603      	mov	r3, r0
 8000730:	70fb      	strb	r3, [r7, #3]
 8000732:	460b      	mov	r3, r1
 8000734:	70bb      	strb	r3, [r7, #2]
 8000736:	4613      	mov	r3, r2
 8000738:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* If ADC_Channel_30 or ADC_Channel_31 is selected */
  if (ADC_Channel > ADC_Channel_29)
 8000742:	78fb      	ldrb	r3, [r7, #3]
 8000744:	2b1d      	cmp	r3, #29
 8000746:	d923      	bls.n	8000790 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR0;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800074c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR0_SMP_SET << (3 * (ADC_Channel - 30));
 800074e:	78fb      	ldrb	r3, [r7, #3]
 8000750:	f1a3 021e 	sub.w	r2, r3, #30
 8000754:	4613      	mov	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4413      	add	r3, r2
 800075a:	2207      	movs	r2, #7
 800075c:	fa02 f303 	lsl.w	r3, r2, r3
 8000760:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	43db      	mvns	r3, r3
 8000766:	68fa      	ldr	r2, [r7, #12]
 8000768:	4013      	ands	r3, r2
 800076a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 30));
 800076c:	7879      	ldrb	r1, [r7, #1]
 800076e:	78fb      	ldrb	r3, [r7, #3]
 8000770:	f1a3 021e 	sub.w	r2, r3, #30
 8000774:	4613      	mov	r3, r2
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	4413      	add	r3, r2
 800077a:	fa01 f303 	lsl.w	r3, r1, r3
 800077e:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000780:	68fa      	ldr	r2, [r7, #12]
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	4313      	orrs	r3, r2
 8000786:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR0 = tmpreg1;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	68fa      	ldr	r2, [r7, #12]
 800078c:	65da      	str	r2, [r3, #92]	; 0x5c
 800078e:	e06c      	b.n	800086a <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_20 ... ADC_Channel_29 is selected */
  else if (ADC_Channel > ADC_Channel_19)
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	2b13      	cmp	r3, #19
 8000794:	d923      	bls.n	80007de <ADC_RegularChannelConfig+0xbe>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 20));
 800079c:	78fb      	ldrb	r3, [r7, #3]
 800079e:	f1a3 0214 	sub.w	r2, r3, #20
 80007a2:	4613      	mov	r3, r2
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	4413      	add	r3, r2
 80007a8:	2207      	movs	r2, #7
 80007aa:	fa02 f303 	lsl.w	r3, r2, r3
 80007ae:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	43db      	mvns	r3, r3
 80007b4:	68fa      	ldr	r2, [r7, #12]
 80007b6:	4013      	ands	r3, r2
 80007b8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 20));
 80007ba:	7879      	ldrb	r1, [r7, #1]
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	f1a3 0214 	sub.w	r2, r3, #20
 80007c2:	4613      	mov	r3, r2
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	4413      	add	r3, r2
 80007c8:	fa01 f303 	lsl.w	r3, r1, r3
 80007cc:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	68fa      	ldr	r2, [r7, #12]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	e045      	b.n	800086a <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_10 ... ADC_Channel_19 is selected */
  else if (ADC_Channel > ADC_Channel_9)
 80007de:	78fb      	ldrb	r3, [r7, #3]
 80007e0:	2b09      	cmp	r3, #9
 80007e2:	d923      	bls.n	800082c <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	691b      	ldr	r3, [r3, #16]
 80007e8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * (ADC_Channel - 10));
 80007ea:	78fb      	ldrb	r3, [r7, #3]
 80007ec:	f1a3 020a 	sub.w	r2, r3, #10
 80007f0:	4613      	mov	r3, r2
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	4413      	add	r3, r2
 80007f6:	2207      	movs	r2, #7
 80007f8:	fa02 f303 	lsl.w	r3, r2, r3
 80007fc:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	43db      	mvns	r3, r3
 8000802:	68fa      	ldr	r2, [r7, #12]
 8000804:	4013      	ands	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000808:	7879      	ldrb	r1, [r7, #1]
 800080a:	78fb      	ldrb	r3, [r7, #3]
 800080c:	f1a3 020a 	sub.w	r2, r3, #10
 8000810:	4613      	mov	r3, r2
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	4413      	add	r3, r2
 8000816:	fa01 f303 	lsl.w	r3, r1, r3
 800081a:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800081c:	68fa      	ldr	r2, [r7, #12]
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	4313      	orrs	r3, r2
 8000822:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	611a      	str	r2, [r3, #16]
 800082a:	e01e      	b.n	800086a <ADC_RegularChannelConfig+0x14a>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR3;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	695b      	ldr	r3, [r3, #20]
 8000830:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR3_SMP_SET << (3 * ADC_Channel);
 8000832:	78fa      	ldrb	r2, [r7, #3]
 8000834:	4613      	mov	r3, r2
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	4413      	add	r3, r2
 800083a:	2207      	movs	r2, #7
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	43db      	mvns	r3, r3
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	4013      	ands	r3, r2
 800084a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800084c:	7879      	ldrb	r1, [r7, #1]
 800084e:	78fa      	ldrb	r2, [r7, #3]
 8000850:	4613      	mov	r3, r2
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	4413      	add	r3, r2
 8000856:	fa01 f303 	lsl.w	r3, r1, r3
 800085a:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800085c:	68fa      	ldr	r2, [r7, #12]
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	4313      	orrs	r3, r2
 8000862:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR3 = tmpreg1;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	615a      	str	r2, [r3, #20]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800086a:	78bb      	ldrb	r3, [r7, #2]
 800086c:	2b06      	cmp	r3, #6
 800086e:	d821      	bhi.n	80008b4 <ADC_RegularChannelConfig+0x194>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR5;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR5_SQ_SET << (5 * (Rank - 1));
 8000876:	78bb      	ldrb	r3, [r7, #2]
 8000878:	1e5a      	subs	r2, r3, #1
 800087a:	4613      	mov	r3, r2
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	4413      	add	r3, r2
 8000880:	221f      	movs	r2, #31
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	43db      	mvns	r3, r3
 800088c:	68fa      	ldr	r2, [r7, #12]
 800088e:	4013      	ands	r3, r2
 8000890:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000892:	78f9      	ldrb	r1, [r7, #3]
 8000894:	78bb      	ldrb	r3, [r7, #2]
 8000896:	1e5a      	subs	r2, r3, #1
 8000898:	4613      	mov	r3, r2
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	4413      	add	r3, r2
 800089e:	fa01 f303 	lsl.w	r3, r1, r3
 80008a2:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80008a4:	68fa      	ldr	r2, [r7, #12]
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80008b2:	e095      	b.n	80009e0 <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 80008b4:	78bb      	ldrb	r3, [r7, #2]
 80008b6:	2b0c      	cmp	r3, #12
 80008b8:	d821      	bhi.n	80008fe <ADC_RegularChannelConfig+0x1de>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008be:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR4_SQ_SET << (5 * (Rank - 7));
 80008c0:	78bb      	ldrb	r3, [r7, #2]
 80008c2:	1fda      	subs	r2, r3, #7
 80008c4:	4613      	mov	r3, r2
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	4413      	add	r3, r2
 80008ca:	221f      	movs	r2, #31
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	43db      	mvns	r3, r3
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	4013      	ands	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80008dc:	78f9      	ldrb	r1, [r7, #3]
 80008de:	78bb      	ldrb	r3, [r7, #2]
 80008e0:	1fda      	subs	r2, r3, #7
 80008e2:	4613      	mov	r3, r2
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	4413      	add	r3, r2
 80008e8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ec:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	68fa      	ldr	r2, [r7, #12]
 80008fa:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80008fc:	e070      	b.n	80009e0 <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
  }  
  /* For Rank 13 to 18 */
  else if (Rank < 19)
 80008fe:	78bb      	ldrb	r3, [r7, #2]
 8000900:	2b12      	cmp	r3, #18
 8000902:	d823      	bhi.n	800094c <ADC_RegularChannelConfig+0x22c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000908:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 13));
 800090a:	78bb      	ldrb	r3, [r7, #2]
 800090c:	f1a3 020d 	sub.w	r2, r3, #13
 8000910:	4613      	mov	r3, r2
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	4413      	add	r3, r2
 8000916:	221f      	movs	r2, #31
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	43db      	mvns	r3, r3
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	4013      	ands	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000928:	78f9      	ldrb	r1, [r7, #3]
 800092a:	78bb      	ldrb	r3, [r7, #2]
 800092c:	f1a3 020d 	sub.w	r2, r3, #13
 8000930:	4613      	mov	r3, r2
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4413      	add	r3, r2
 8000936:	fa01 f303 	lsl.w	r3, r1, r3
 800093a:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800093c:	68fa      	ldr	r2, [r7, #12]
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	4313      	orrs	r3, r2
 8000942:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	639a      	str	r2, [r3, #56]	; 0x38
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800094a:	e049      	b.n	80009e0 <ADC_RegularChannelConfig+0x2c0>
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
    
  /* For Rank 19 to 24 */
  else if (Rank < 25)
 800094c:	78bb      	ldrb	r3, [r7, #2]
 800094e:	2b18      	cmp	r3, #24
 8000950:	d823      	bhi.n	800099a <ADC_RegularChannelConfig+0x27a>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000956:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 19));
 8000958:	78bb      	ldrb	r3, [r7, #2]
 800095a:	f1a3 0213 	sub.w	r2, r3, #19
 800095e:	4613      	mov	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	4413      	add	r3, r2
 8000964:	221f      	movs	r2, #31
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	43db      	mvns	r3, r3
 8000970:	68fa      	ldr	r2, [r7, #12]
 8000972:	4013      	ands	r3, r2
 8000974:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 19));
 8000976:	78f9      	ldrb	r1, [r7, #3]
 8000978:	78bb      	ldrb	r3, [r7, #2]
 800097a:	f1a3 0213 	sub.w	r2, r3, #19
 800097e:	4613      	mov	r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	4413      	add	r3, r2
 8000984:	fa01 f303 	lsl.w	r3, r1, r3
 8000988:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	4313      	orrs	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000998:	e022      	b.n	80009e0 <ADC_RegularChannelConfig+0x2c0>
  
  /* For Rank 25 to 28 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 25));
 80009a0:	78bb      	ldrb	r3, [r7, #2]
 80009a2:	f1a3 0219 	sub.w	r2, r3, #25
 80009a6:	4613      	mov	r3, r2
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	4413      	add	r3, r2
 80009ac:	221f      	movs	r2, #31
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	43db      	mvns	r3, r3
 80009b8:	68fa      	ldr	r2, [r7, #12]
 80009ba:	4013      	ands	r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 25));
 80009be:	78f9      	ldrb	r1, [r7, #3]
 80009c0:	78bb      	ldrb	r3, [r7, #2]
 80009c2:	f1a3 0219 	sub.w	r2, r3, #25
 80009c6:	4613      	mov	r3, r2
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	4413      	add	r3, r2
 80009cc:	fa01 f303 	lsl.w	r3, r1, r3
 80009d0:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	68fa      	ldr	r2, [r7, #12]
 80009de:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	609a      	str	r2, [r3, #8]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a18:	b29b      	uxth	r3, r3
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_RCNR: Regular channel not ready
  *     @arg ADC_FLAG_JCNR: Injected channel not ready
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint16_t ADC_FLAG)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000a30:	2300      	movs	r3, #0
 8000a32:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	887b      	ldrh	r3, [r7, #2]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d002      	beq.n	8000a46 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000a40:	2301      	movs	r3, #1
 8000a42:	73fb      	strb	r3, [r7, #15]
 8000a44:	e001      	b.n	8000a4a <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b087      	sub	sp, #28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	e07e      	b.n	8000b72 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000a74:	2201      	movs	r2, #1
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	4013      	ands	r3, r2
 8000a86:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d16d      	bne.n	8000b6c <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	2103      	movs	r1, #3
 8000a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	401a      	ands	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	791b      	ldrb	r3, [r3, #4]
 8000aae:	4619      	mov	r1, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab8:	431a      	orrs	r2, r3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	791b      	ldrb	r3, [r3, #4]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d003      	beq.n	8000ace <GPIO_Init+0x76>
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	791b      	ldrb	r3, [r3, #4]
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d136      	bne.n	8000b3c <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	689a      	ldr	r2, [r3, #8]
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	2103      	movs	r1, #3
 8000ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	401a      	ands	r2, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	689a      	ldr	r2, [r3, #8]
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	795b      	ldrb	r3, [r3, #5]
 8000aec:	4619      	mov	r1, r3
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	431a      	orrs	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	889b      	ldrh	r3, [r3, #4]
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	2101      	movs	r1, #1
 8000b08:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	4013      	ands	r3, r2
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	889b      	ldrh	r3, [r3, #4]
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	b21a      	sxth	r2, r3
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	799b      	ldrb	r3, [r3, #6]
 8000b26:	4619      	mov	r1, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b30:	b21b      	sxth	r3, r3
 8000b32:	4313      	orrs	r3, r2
 8000b34:	b21b      	sxth	r3, r3
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	68da      	ldr	r2, [r3, #12]
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	2103      	movs	r1, #3
 8000b48:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	401a      	ands	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	68da      	ldr	r2, [r3, #12]
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	79db      	ldrb	r3, [r3, #7]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	fa01 f303 	lsl.w	r3, r1, r3
 8000b66:	431a      	orrs	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	2b0f      	cmp	r3, #15
 8000b76:	f67f af7d 	bls.w	8000a74 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	371c      	adds	r7, #28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <GPIO_SetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRL = GPIO_Pin;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	887a      	ldrh	r2, [r7, #2]
 8000b94:	831a      	strh	r2, [r3, #24]
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..H) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	8a9b      	ldrh	r3, [r3, #20]
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	887b      	ldrh	r3, [r7, #2]
 8000bb4:	4053      	eors	r3, r2
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	829a      	strh	r2, [r3, #20]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <RCC_HSICmd+0x1c>)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	6013      	str	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	42470000 	.word	0x42470000

08000be8 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000bf4:	78fb      	ldrb	r3, [r7, #3]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d006      	beq.n	8000c08 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000bfa:	4909      	ldr	r1, [pc, #36]	; (8000c20 <RCC_AHBPeriphClockCmd+0x38>)
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <RCC_AHBPeriphClockCmd+0x38>)
 8000bfe:	69da      	ldr	r2, [r3, #28]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000c06:	e006      	b.n	8000c16 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000c08:	4905      	ldr	r1, [pc, #20]	; (8000c20 <RCC_AHBPeriphClockCmd+0x38>)
 8000c0a:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <RCC_AHBPeriphClockCmd+0x38>)
 8000c0c:	69da      	ldr	r2, [r3, #28]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	43db      	mvns	r3, r3
 8000c12:	4013      	ands	r3, r2
 8000c14:	61cb      	str	r3, [r1, #28]
  }
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr
 8000c20:	40023800 	.word	0x40023800

08000c24 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c30:	78fb      	ldrb	r3, [r7, #3]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d006      	beq.n	8000c44 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000c36:	4909      	ldr	r1, [pc, #36]	; (8000c5c <RCC_APB2PeriphClockCmd+0x38>)
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <RCC_APB2PeriphClockCmd+0x38>)
 8000c3a:	6a1a      	ldr	r2, [r3, #32]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000c42:	e006      	b.n	8000c52 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000c44:	4905      	ldr	r1, [pc, #20]	; (8000c5c <RCC_APB2PeriphClockCmd+0x38>)
 8000c46:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <RCC_APB2PeriphClockCmd+0x38>)
 8000c48:	6a1a      	ldr	r2, [r3, #32]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	4013      	ands	r3, r2
 8000c50:	620b      	str	r3, [r1, #32]
  }
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	40023800 	.word	0x40023800

08000c60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b087      	sub	sp, #28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8000c72:	2300      	movs	r3, #0
 8000c74:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	095b      	lsrs	r3, r3, #5
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	60fb      	str	r3, [r7, #12]

  if (tmp == 1)               /* The flag to check is in CR register */
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d103      	bne.n	8000c8c <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <RCC_GetFlagStatus+0x60>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	e002      	b.n	8000c92 <RCC_GetFlagStatus+0x32>
  }
  else          /* The flag to check is in CSR register (tmp == 2) */
  {
    statusreg = RCC->CSR;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <RCC_GetFlagStatus+0x60>)
 8000c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c90:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	f003 031f 	and.w	r3, r3, #31
 8000c98:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000c9a:	697a      	ldr	r2, [r7, #20]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d002      	beq.n	8000cb0 <RCC_GetFlagStatus+0x50>
  {
    bitstatus = SET;
 8000caa:	2301      	movs	r3, #1
 8000cac:	74fb      	strb	r3, [r7, #19]
 8000cae:	e001      	b.n	8000cb4 <RCC_GetFlagStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8000cb4:	7cfb      	ldrb	r3, [r7, #19]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	371c      	adds	r7, #28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	40023800 	.word	0x40023800

08000cc4 <ADC_init>:
**  Abstract: main program
**
**===========================================================================
*/
void ADC_init()
	{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStructure;
		 ADC_InitTypeDef ADC_InitStructure;
		/* Enable GPIO clock */
			 RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000cca:	2101      	movs	r1, #1
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f7ff ff8b 	bl	8000be8 <RCC_AHBPeriphClockCmd>
			 /* Configure ADCx Channel 2 as analog input */
			 GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 ;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	61bb      	str	r3, [r7, #24]
			 GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	773b      	strb	r3, [r7, #28]
			 GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	77fb      	strb	r3, [r7, #31]
			 GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000cde:	f107 0318 	add.w	r3, r7, #24
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	481e      	ldr	r0, [pc, #120]	; (8000d60 <ADC_init+0x9c>)
 8000ce6:	f7ff feb7 	bl	8000a58 <GPIO_Init>
			/* Enable the HSI oscillator */
			 RCC_HSICmd(ENABLE);
 8000cea:	2001      	movs	r0, #1
 8000cec:	f7ff ff6c 	bl	8000bc8 <RCC_HSICmd>
			/* Check that HSI oscillator is ready */
			 while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 8000cf0:	bf00      	nop
 8000cf2:	2021      	movs	r0, #33	; 0x21
 8000cf4:	f7ff ffb4 	bl	8000c60 <RCC_GetFlagStatus>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d0f9      	beq.n	8000cf2 <ADC_init+0x2e>
			 /* Enable ADC clock */
			 RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8000cfe:	2101      	movs	r1, #1
 8000d00:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d04:	f7ff ff8e 	bl	8000c24 <RCC_APB2PeriphClockCmd>
			 /* Initialize ADC structure */
			 ADC_StructInit(&ADC_InitStructure);
 8000d08:	463b      	mov	r3, r7
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fccc 	bl	80006a8 <ADC_StructInit>
			 /* ADC1 configuration */
			 ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8000d10:	2300      	movs	r3, #0
 8000d12:	603b      	str	r3, [r7, #0]
			 ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	717b      	strb	r3, [r7, #5]
			 ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60bb      	str	r3, [r7, #8]
			 ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	613b      	str	r3, [r7, #16]
			 ADC_InitStructure.ADC_NbrOfConversion = 1;
 8000d20:	2301      	movs	r3, #1
 8000d22:	753b      	strb	r3, [r7, #20]
			 ADC_Init(ADC1, &ADC_InitStructure);
 8000d24:	463b      	mov	r3, r7
 8000d26:	4619      	mov	r1, r3
 8000d28:	480e      	ldr	r0, [pc, #56]	; (8000d64 <ADC_init+0xa0>)
 8000d2a:	f7ff fc69 	bl	8000600 <ADC_Init>
			/* ADCx regular channel8 configuration */
			 ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_16Cycles);
 8000d2e:	2302      	movs	r3, #2
 8000d30:	2201      	movs	r2, #1
 8000d32:	2100      	movs	r1, #0
 8000d34:	480b      	ldr	r0, [pc, #44]	; (8000d64 <ADC_init+0xa0>)
 8000d36:	f7ff fcf3 	bl	8000720 <ADC_RegularChannelConfig>
			 /* Enable the ADC */
			 ADC_Cmd(ADC1, ENABLE);
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	4809      	ldr	r0, [pc, #36]	; (8000d64 <ADC_init+0xa0>)
 8000d3e:	f7ff fcd3 	bl	80006e8 <ADC_Cmd>
			 /* Wait until the ADC1 is ready */
			 while(ADC_GetFlagStatus(ADC1, ADC_FLAG_ADONS) == RESET)
 8000d42:	bf00      	nop
 8000d44:	2140      	movs	r1, #64	; 0x40
 8000d46:	4807      	ldr	r0, [pc, #28]	; (8000d64 <ADC_init+0xa0>)
 8000d48:	f7ff fe6c 	bl	8000a24 <ADC_GetFlagStatus>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d0f8      	beq.n	8000d44 <ADC_init+0x80>
			 	 {
			 	 }
			 	 /* Start ADC Software Conversion */
			 	 ADC_SoftwareStartConv(ADC1);
 8000d52:	4804      	ldr	r0, [pc, #16]	; (8000d64 <ADC_init+0xa0>)
 8000d54:	f7ff fe4a 	bl	80009ec <ADC_SoftwareStartConv>

	}
 8000d58:	bf00      	nop
 8000d5a:	3720      	adds	r7, #32
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40020000 	.word	0x40020000
 8000d64:	40012400 	.word	0x40012400

08000d68 <Dio_init>:

void Dio_init()
	{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
		RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000d6e:	2101      	movs	r1, #1
 8000d70:	2001      	movs	r0, #1
 8000d72:	f7ff ff39 	bl	8000be8 <RCC_AHBPeriphClockCmd>
		/*nastavenie diody */
		GPIO_InitTypeDef gpioInitStruc;

		gpioInitStruc.GPIO_Mode = GPIO_Mode_OUT;
 8000d76:	2301      	movs	r3, #1
 8000d78:	713b      	strb	r3, [r7, #4]
		gpioInitStruc.GPIO_OType = GPIO_OType_PP;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	71bb      	strb	r3, [r7, #6]
		gpioInitStruc.GPIO_Pin = GPIO_Pin_5;
 8000d7e:	2320      	movs	r3, #32
 8000d80:	603b      	str	r3, [r7, #0]
		gpioInitStruc.GPIO_PuPd= GPIO_PuPd_UP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	71fb      	strb	r3, [r7, #7]
		gpioInitStruc.GPIO_Speed = GPIO_Speed_40MHz;
 8000d86:	2303      	movs	r3, #3
 8000d88:	717b      	strb	r3, [r7, #5]

		GPIO_Init(GPIOA, &gpioInitStruc);
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <Dio_init+0x3c>)
 8000d90:	f7ff fe62 	bl	8000a58 <GPIO_Init>
		GPIO_SetBits(GPIOA, GPIO_Pin_5);
 8000d94:	2120      	movs	r1, #32
 8000d96:	4803      	ldr	r0, [pc, #12]	; (8000da4 <Dio_init+0x3c>)
 8000d98:	f7ff fef4 	bl	8000b84 <GPIO_SetBits>
	}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40020000 	.word	0x40020000

08000da8 <blikanie>:

void blikanie(int cas)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	int i=0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < cas; i++)
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	e002      	b.n	8000dc0 <blikanie+0x18>
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fa      	ldr	r2, [r7, #12]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	dbf8      	blt.n	8000dba <blikanie+0x12>
		  	  	  	  {
		  	  	  	  }
		  GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
 8000dc8:	2120      	movs	r1, #32
 8000dca:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <blikanie+0x30>)
 8000dcc:	f7ff fee8 	bl	8000ba0 <GPIO_ToggleBits>
}
 8000dd0:	bf00      	nop
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40020000 	.word	0x40020000
 8000ddc:	00000000 	.word	0x00000000

08000de0 <main>:

int main(void)
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b08d      	sub	sp, #52	; 0x34
 8000de4:	af00      	add	r7, sp, #0
	double AD_value=0;
 8000de6:	f04f 0300 	mov.w	r3, #0
 8000dea:	f04f 0400 	mov.w	r4, #0
 8000dee:	e9c7 3402 	strd	r3, r4, [r7, #8]
	double pred;
	double BUTTON;
	ADC_init();
 8000df2:	f7ff ff67 	bl	8000cc4 <ADC_init>
	Dio_init();
 8000df6:	f7ff ffb7 	bl	8000d68 <Dio_init>
	int stav;


  while (1)
  {
	  ADC_SoftwareStartConv(ADC1);
 8000dfa:	4881      	ldr	r0, [pc, #516]	; (8001000 <main+0x220>)
 8000dfc:	f7ff fdf6 	bl	80009ec <ADC_SoftwareStartConv>
	  while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC)){}
 8000e00:	bf00      	nop
 8000e02:	2102      	movs	r1, #2
 8000e04:	487e      	ldr	r0, [pc, #504]	; (8001000 <main+0x220>)
 8000e06:	f7ff fe0d 	bl	8000a24 <ADC_GetFlagStatus>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d0f8      	beq.n	8000e02 <main+0x22>
	  BUTTON=ADC_GetConversionValue(ADC1);
 8000e10:	487b      	ldr	r0, [pc, #492]	; (8001000 <main+0x220>)
 8000e12:	f7ff fdfb 	bl	8000a0c <ADC_GetConversionValue>
 8000e16:	4603      	mov	r3, r0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff faf3 	bl	8000404 <__aeabi_ui2d>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	460c      	mov	r4, r1
 8000e22:	e887 0018 	stmia.w	r7, {r3, r4}
	  if (pred<=BUTTON+15 && pred>=BUTTON-15) stlacj++;					//  ak sa stlaci a chvilu nepusti ani nekmita
 8000e26:	f04f 0200 	mov.w	r2, #0
 8000e2a:	4b76      	ldr	r3, [pc, #472]	; (8001004 <main+0x224>)
 8000e2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e30:	f7ff f9ac 	bl	800018c <__adddf3>
 8000e34:	4603      	mov	r3, r0
 8000e36:	460c      	mov	r4, r1
 8000e38:	4618      	mov	r0, r3
 8000e3a:	4621      	mov	r1, r4
 8000e3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000e40:	f7ff fbca 	bl	80005d8 <__aeabi_dcmpge>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d015      	beq.n	8000e76 <main+0x96>
 8000e4a:	f04f 0200 	mov.w	r2, #0
 8000e4e:	4b6d      	ldr	r3, [pc, #436]	; (8001004 <main+0x224>)
 8000e50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e54:	f7ff f998 	bl	8000188 <__aeabi_dsub>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	460c      	mov	r4, r1
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	4621      	mov	r1, r4
 8000e60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000e64:	f7ff fbae 	bl	80005c4 <__aeabi_dcmple>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <main+0x96>
 8000e6e:	6a3b      	ldr	r3, [r7, #32]
 8000e70:	3301      	adds	r3, #1
 8000e72:	623b      	str	r3, [r7, #32]
 8000e74:	e001      	b.n	8000e7a <main+0x9a>
	  	  else stlacj=0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	623b      	str	r3, [r7, #32]
	  	  if (stlacj>50)
 8000e7a:	6a3b      	ldr	r3, [r7, #32]
 8000e7c:	2b32      	cmp	r3, #50	; 0x32
 8000e7e:	dd61      	ble.n	8000f44 <main+0x164>
	  	  {
	  		  stlacene=1;
 8000e80:	2301      	movs	r3, #1
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
	  	  	  stlacj=50;										// aby nepretieklo
 8000e84:	2332      	movs	r3, #50	; 0x32
 8000e86:	623b      	str	r3, [r7, #32]
	  	  	  if (BUTTON<=2020 && BUTTON>=2009) stav=1;
 8000e88:	a349      	add	r3, pc, #292	; (adr r3, 8000fb0 <main+0x1d0>)
 8000e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e92:	f7ff fb97 	bl	80005c4 <__aeabi_dcmple>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d00c      	beq.n	8000eb6 <main+0xd6>
 8000e9c:	a346      	add	r3, pc, #280	; (adr r3, 8000fb8 <main+0x1d8>)
 8000e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ea6:	f7ff fb97 	bl	80005d8 <__aeabi_dcmpge>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d002      	beq.n	8000eb6 <main+0xd6>
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	e046      	b.n	8000f44 <main+0x164>
	  	  	  else if (BUTTON<=2928 && BUTTON>=2905) stav=2;
 8000eb6:	a342      	add	r3, pc, #264	; (adr r3, 8000fc0 <main+0x1e0>)
 8000eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ebc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ec0:	f7ff fb80 	bl	80005c4 <__aeabi_dcmple>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d00c      	beq.n	8000ee4 <main+0x104>
 8000eca:	a33f      	add	r3, pc, #252	; (adr r3, 8000fc8 <main+0x1e8>)
 8000ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ed4:	f7ff fb80 	bl	80005d8 <__aeabi_dcmpge>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d002      	beq.n	8000ee4 <main+0x104>
 8000ede:	2302      	movs	r3, #2
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	e02f      	b.n	8000f44 <main+0x164>
	  	  	  else if (BUTTON<=3480 && BUTTON>=3458) stav=3;
 8000ee4:	a33a      	add	r3, pc, #232	; (adr r3, 8000fd0 <main+0x1f0>)
 8000ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000eee:	f7ff fb69 	bl	80005c4 <__aeabi_dcmple>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d00c      	beq.n	8000f12 <main+0x132>
 8000ef8:	a337      	add	r3, pc, #220	; (adr r3, 8000fd8 <main+0x1f8>)
 8000efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f02:	f7ff fb69 	bl	80005d8 <__aeabi_dcmpge>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d002      	beq.n	8000f12 <main+0x132>
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	e018      	b.n	8000f44 <main+0x164>
	  	  	  else if (BUTTON<=3666 && BUTTON>=3656) stav=4;
 8000f12:	a333      	add	r3, pc, #204	; (adr r3, 8000fe0 <main+0x200>)
 8000f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f1c:	f7ff fb52 	bl	80005c4 <__aeabi_dcmple>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d00c      	beq.n	8000f40 <main+0x160>
 8000f26:	a330      	add	r3, pc, #192	; (adr r3, 8000fe8 <main+0x208>)
 8000f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f30:	f7ff fb52 	bl	80005d8 <__aeabi_dcmpge>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <main+0x160>
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	e001      	b.n	8000f44 <main+0x164>
	  	  	  else stav=5;
 8000f40:	2305      	movs	r3, #5
 8000f42:	617b      	str	r3, [r7, #20]
	  	  }
	  	  if (BUTTON>=3940 && BUTTON<=3955) stlacn++;					// ak sa pusti a nekmita
 8000f44:	a32a      	add	r3, pc, #168	; (adr r3, 8000ff0 <main+0x210>)
 8000f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f4e:	f7ff fb43 	bl	80005d8 <__aeabi_dcmpge>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d00d      	beq.n	8000f74 <main+0x194>
 8000f58:	a327      	add	r3, pc, #156	; (adr r3, 8000ff8 <main+0x218>)
 8000f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f62:	f7ff fb2f 	bl	80005c4 <__aeabi_dcmple>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <main+0x194>
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	61fb      	str	r3, [r7, #28]
 8000f72:	e001      	b.n	8000f78 <main+0x198>
	  	  else stlacn=0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
	  	  if (stlacn>50)
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	2b32      	cmp	r3, #50	; 0x32
 8000f7c:	dd03      	ble.n	8000f86 <main+0x1a6>
	  	  {
	  		  stlacene=0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
	  		  stlacn=50;  										// aby nepretieklo
 8000f82:	2332      	movs	r3, #50	; 0x32
 8000f84:	61fb      	str	r3, [r7, #28]
	  	  }
	  	  if (stlacene!=predstl && stlacene==0) blikanie (stav*100000);     //zmena stavu z 1 na 0
 8000f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d009      	beq.n	8000fa2 <main+0x1c2>
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d106      	bne.n	8000fa2 <main+0x1c2>
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	4a1c      	ldr	r2, [pc, #112]	; (8001008 <main+0x228>)
 8000f98:	fb02 f303 	mul.w	r3, r2, r3
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff03 	bl	8000da8 <blikanie>
	  	  predstl=stlacene;
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa4:	61bb      	str	r3, [r7, #24]
	  	  pred=BUTTON;
 8000fa6:	e897 0018 	ldmia.w	r7, {r3, r4}
 8000faa:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  }
 8000fae:	e724      	b.n	8000dfa <main+0x1a>
 8000fb0:	00000000 	.word	0x00000000
 8000fb4:	409f9000 	.word	0x409f9000
 8000fb8:	00000000 	.word	0x00000000
 8000fbc:	409f6400 	.word	0x409f6400
 8000fc0:	00000000 	.word	0x00000000
 8000fc4:	40a6e000 	.word	0x40a6e000
 8000fc8:	00000000 	.word	0x00000000
 8000fcc:	40a6b200 	.word	0x40a6b200
 8000fd0:	00000000 	.word	0x00000000
 8000fd4:	40ab3000 	.word	0x40ab3000
 8000fd8:	00000000 	.word	0x00000000
 8000fdc:	40ab0400 	.word	0x40ab0400
 8000fe0:	00000000 	.word	0x00000000
 8000fe4:	40aca400 	.word	0x40aca400
 8000fe8:	00000000 	.word	0x00000000
 8000fec:	40ac9000 	.word	0x40ac9000
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40aec800 	.word	0x40aec800
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	40aee600 	.word	0x40aee600
 8001000:	40012400 	.word	0x40012400
 8001004:	402e0000 	.word	0x402e0000
 8001008:	000186a0 	.word	0x000186a0

0800100c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800100c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001044 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001010:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001012:	e003      	b.n	800101c <LoopCopyDataInit>

08001014 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8001016:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001018:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800101a:	3104      	adds	r1, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800101c:	480b      	ldr	r0, [pc, #44]	; (800104c <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8001020:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001022:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001024:	d3f6      	bcc.n	8001014 <CopyDataInit>
  ldr r2, =_sbss
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8001028:	e002      	b.n	8001030 <LoopFillZerobss>

0800102a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800102c:	f842 3b04 	str.w	r3, [r2], #4

08001030 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <LoopFillZerobss+0x28>)
  cmp r2, r3
 8001032:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001034:	d3f9      	bcc.n	800102a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001036:	f000 f841 	bl	80010bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800103a:	f000 f903 	bl	8001244 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800103e:	f7ff fecf 	bl	8000de0 <main>
  bx lr
 8001042:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001044:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8001048:	080012b0 	.word	0x080012b0
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 800104c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001050:	20000000 	.word	0x20000000
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8001054:	20000000 	.word	0x20000000
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8001058:	2000001c 	.word	0x2000001c

0800105c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC1_IRQHandler>
	...

08001060 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8001070:	e7fe      	b.n	8001070 <HardFault_Handler+0x4>
 8001072:	bf00      	nop

08001074 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001078:	e7fe      	b.n	8001078 <MemManage_Handler+0x4>
 800107a:	bf00      	nop

0800107c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001080:	e7fe      	b.n	8001080 <BusFault_Handler+0x4>
 8001082:	bf00      	nop

08001084 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001088:	e7fe      	b.n	8001088 <UsageFault_Handler+0x4>
 800108a:	bf00      	nop

0800108c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80010c0:	4a15      	ldr	r2, [pc, #84]	; (8001118 <SystemInit+0x5c>)
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <SystemInit+0x5c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ca:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80010cc:	4912      	ldr	r1, [pc, #72]	; (8001118 <SystemInit+0x5c>)
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <SystemInit+0x5c>)
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <SystemInit+0x60>)
 80010d4:	4013      	ands	r3, r2
 80010d6:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80010d8:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <SystemInit+0x5c>)
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <SystemInit+0x5c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80010e2:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80010e6:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80010e8:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <SystemInit+0x5c>)
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <SystemInit+0x5c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f2:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80010f4:	4a08      	ldr	r2, [pc, #32]	; (8001118 <SystemInit+0x5c>)
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <SystemInit+0x5c>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80010fe:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <SystemInit+0x5c>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8001106:	f000 f80d 	bl	8001124 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <SystemInit+0x64>)
 800110c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001110:	609a      	str	r2, [r3, #8]
#endif
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	88ffc00c 	.word	0x88ffc00c
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	2300      	movs	r3, #0
 8001130:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001132:	4a41      	ldr	r2, [pc, #260]	; (8001238 <SetSysClock+0x114>)
 8001134:	4b40      	ldr	r3, [pc, #256]	; (8001238 <SetSysClock+0x114>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800113c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800113e:	4b3e      	ldr	r3, [pc, #248]	; (8001238 <SetSysClock+0x114>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001146:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3301      	adds	r3, #1
 800114c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d103      	bne.n	800115c <SetSysClock+0x38>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800115a:	d1f0      	bne.n	800113e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800115c:	4b36      	ldr	r3, [pc, #216]	; (8001238 <SetSysClock+0x114>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001168:	2301      	movs	r3, #1
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	e001      	b.n	8001172 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800116e:	2300      	movs	r3, #0
 8001170:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d15a      	bne.n	800122e <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8001178:	4a30      	ldr	r2, [pc, #192]	; (800123c <SetSysClock+0x118>)
 800117a:	4b30      	ldr	r3, [pc, #192]	; (800123c <SetSysClock+0x118>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8001184:	4a2d      	ldr	r2, [pc, #180]	; (800123c <SetSysClock+0x118>)
 8001186:	4b2d      	ldr	r3, [pc, #180]	; (800123c <SetSysClock+0x118>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f043 0302 	orr.w	r3, r3, #2
 800118e:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8001190:	4a2a      	ldr	r2, [pc, #168]	; (800123c <SetSysClock+0x118>)
 8001192:	4b2a      	ldr	r3, [pc, #168]	; (800123c <SetSysClock+0x118>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800119c:	4a26      	ldr	r2, [pc, #152]	; (8001238 <SetSysClock+0x114>)
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <SetSysClock+0x114>)
 80011a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a6:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 80011a8:	4b25      	ldr	r3, [pc, #148]	; (8001240 <SetSysClock+0x11c>)
 80011aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011ae:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 80011b0:	bf00      	nop
 80011b2:	4b23      	ldr	r3, [pc, #140]	; (8001240 <SetSysClock+0x11c>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0310 	and.w	r3, r3, #16
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f9      	bne.n	80011b2 <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80011be:	4a1e      	ldr	r2, [pc, #120]	; (8001238 <SetSysClock+0x114>)
 80011c0:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <SetSysClock+0x114>)
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80011c6:	4a1c      	ldr	r2, [pc, #112]	; (8001238 <SetSysClock+0x114>)
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <SetSysClock+0x114>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 80011ce:	4a1a      	ldr	r2, [pc, #104]	; (8001238 <SetSysClock+0x114>)
 80011d0:	4b19      	ldr	r3, [pc, #100]	; (8001238 <SetSysClock+0x114>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 80011d6:	4a18      	ldr	r2, [pc, #96]	; (8001238 <SetSysClock+0x114>)
 80011d8:	4b17      	ldr	r3, [pc, #92]	; (8001238 <SetSysClock+0x114>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80011e0:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 80011e2:	4a15      	ldr	r2, [pc, #84]	; (8001238 <SetSysClock+0x114>)
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <SetSysClock+0x114>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 80011ec:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80011ee:	4a12      	ldr	r2, [pc, #72]	; (8001238 <SetSysClock+0x114>)
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <SetSysClock+0x114>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011f8:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80011fa:	bf00      	nop
 80011fc:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <SetSysClock+0x114>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0f9      	beq.n	80011fc <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001208:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <SetSysClock+0x114>)
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <SetSysClock+0x114>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f023 0303 	bic.w	r3, r3, #3
 8001212:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001214:	4a08      	ldr	r2, [pc, #32]	; (8001238 <SetSysClock+0x114>)
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <SetSysClock+0x114>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f043 0303 	orr.w	r3, r3, #3
 800121e:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001220:	bf00      	nop
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <SetSysClock+0x114>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	2b0c      	cmp	r3, #12
 800122c:	d1f9      	bne.n	8001222 <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	40023800 	.word	0x40023800
 800123c:	40023c00 	.word	0x40023c00
 8001240:	40007000 	.word	0x40007000

08001244 <__libc_init_array>:
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <__libc_init_array+0x3c>)
 8001246:	b570      	push	{r4, r5, r6, lr}
 8001248:	461e      	mov	r6, r3
 800124a:	4c0e      	ldr	r4, [pc, #56]	; (8001284 <__libc_init_array+0x40>)
 800124c:	2500      	movs	r5, #0
 800124e:	1ae4      	subs	r4, r4, r3
 8001250:	10a4      	asrs	r4, r4, #2
 8001252:	42a5      	cmp	r5, r4
 8001254:	d004      	beq.n	8001260 <__libc_init_array+0x1c>
 8001256:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800125a:	4798      	blx	r3
 800125c:	3501      	adds	r5, #1
 800125e:	e7f8      	b.n	8001252 <__libc_init_array+0xe>
 8001260:	f000 f816 	bl	8001290 <_init>
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <__libc_init_array+0x44>)
 8001266:	4c09      	ldr	r4, [pc, #36]	; (800128c <__libc_init_array+0x48>)
 8001268:	461e      	mov	r6, r3
 800126a:	1ae4      	subs	r4, r4, r3
 800126c:	10a4      	asrs	r4, r4, #2
 800126e:	2500      	movs	r5, #0
 8001270:	42a5      	cmp	r5, r4
 8001272:	d004      	beq.n	800127e <__libc_init_array+0x3a>
 8001274:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001278:	4798      	blx	r3
 800127a:	3501      	adds	r5, #1
 800127c:	e7f8      	b.n	8001270 <__libc_init_array+0x2c>
 800127e:	bd70      	pop	{r4, r5, r6, pc}
 8001280:	080012a8 	.word	0x080012a8
 8001284:	080012a8 	.word	0x080012a8
 8001288:	080012a8 	.word	0x080012a8
 800128c:	080012ac 	.word	0x080012ac

08001290 <_init>:
 8001290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001292:	bf00      	nop
 8001294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001296:	bc08      	pop	{r3}
 8001298:	469e      	mov	lr, r3
 800129a:	4770      	bx	lr

0800129c <_fini>:
 800129c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800129e:	bf00      	nop
 80012a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012a2:	bc08      	pop	{r3}
 80012a4:	469e      	mov	lr, r3
 80012a6:	4770      	bx	lr
